{% extends 'baseEMP.html.twig' %}

{% block title %}Liste des Ressources{% endblock %}

{% block css %}
  {{ parent() }}
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="{{ asset('front/css/project-card.css')}}" rel="stylesheet" >
  <style>
    #searchInput, #typeFilter, #priceRange, #availableFilter, #sortPrice {
        margin-bottom: 1rem;
    }
  </style>
{% endblock %}

{% block index %}
<section id="portfolio" class="portfolio section">
    <div class="container section-title" data-aos="fade-up">
        <h2>Nos Ressources</h2>
        <p>Découvrez toutes nos ressources disponibles</p>
    </div>




    <form method="get" action="{{ path('app_ressource_index_employee') }}" class="row g-3 mb-4">
    <div class="col-md-3">
        <input type="text" name="search" id="searchInput" class="form-control" placeholder="Rechercher..." value="{{ app.request.get('search') }}">
    </div>
    <div class="col-md-2">
        <select name="type" id="typeFilter" class="form-select">
            <option value="">Tous les types</option>
            {% for type in types %}
                <option value="{{ type }}" {{ app.request.get('type') == type ? 'selected' : '' }}>{{ type }}</option>
            {% endfor %}
        </select>

    </div>
    <div class="col-md-2">
        <input type="number" name="max_price" id="priceRange" class="form-control" placeholder="Prix max" value="{{ app.request.get('max_price') }}">
    </div>
    <div class="col-md-2 form-check">
        <input type="checkbox" class="form-check-input" id="availableFilter" name="available" value="1" {{ app.request.get('available') ? 'checked' : '' }}>
        <label class="form-check-label" for="availableFilter">Disponible uniquement</label>
    </div>
    <div class="col-md-2">
        <select name="sort" id="sortPrice" class="form-select">
            <option value="">Trier par</option>
            <option value="asc" {{ app.request.get('sort') == 'asc' ? 'selected' : '' }}>Prix croissant</option>
            <option value="desc" {{ app.request.get('sort') == 'desc' ? 'selected' : '' }}>Prix décroissant</option>
        </select>
    </div>
    <div class="col-md-1">
        <button type="submit" class="btn btn-primary w-100"><i class="fas fa-search"></i></button>
    </div>
</form>


    <div class="container">
        

        <div class="row ressources-grid g-4">
            {% for ressource in ressources %}
    <div class="col-12 col-sm-6 col-xl-4 mb-4 ressource-card"
         data-nom="{{ ressource.nom|lower }}"
         data-type="{{ ressource.type }}">
<a href="{{ path('show_suggestions', {'id': ressource.id}) }}" class="text-decoration-none text-dark">
    <div class="card entity-card h-100 position-relative">
                <div class="image-container">
                    {% if ressource.image %}
                        <img src="{{ asset('uploads/images/' ~ ressource.image) }}"
                             class="card-img-top"
                             alt="{{ ressource.nom }}"
                             style="height: 200px; object-fit: cover; border-radius: 0 !important;">
                    {% else %}
                        <div class="card-img-top d-flex align-items-center justify-content-center bg-light"
                             style="height: 200px; border-radius: 0 !important;">
                            <i class="bi bi-image fs-1 text-muted"></i>
                        </div>
                    {% endif %}
                </div>

                <div class="card-header entity-header">
                    <i class="fas fa-pc entity-icon"></i>
                    <h5 class="entity-title">{{ ressource.nom }}</h5>
                    <span class="badge bg-{{ ressource.etat == 'Disponible' ? 'success' : 'danger' }} badge-position">
                        <i class="fas fa-{{ ressource.etat == 'Disponible' ? 'check-circle' : 'times-circle' }} me-1"></i>
                        {{ ressource.etat }}
                    </span>
                </div>

                <div class="card-body entity-body">
                    <hr>
                    <div class="project-meta">
                        <i class="fas fa-tag"></i>
                        <span>Type: {{ ressource.type }}</span>
                    </div>
                    <div class="project-meta">
                        <i class="fas fa-euro-sign"></i>
                        <span>Prix: {{ ressource.prix|number_format(3, '.', ' ') }}</span>
                    </div>
                </div>
            </a> <!-- Fin du lien -->
            
            <div class="card-footer entity-footer">
                <a href="{{ ressource.etat == 'Disponible' ? path('app_reservation_new', {'ressourceId': ressource.id}) : '#' }}"
                   class="btn btn-outline-primary btn-sm {{ ressource.etat != 'Disponible' ? 'disabled' : '' }}"
                   {% if ressource.etat != 'Disponible' %}
                       aria-disabled="true"
                       data-bs-toggle="tooltip"
                       title="Ressource indisponible"
                   {% endif %}>
                    <i class="fas fa-calendar-plus me-1"></i>
                    Réserver
                </a>
            </div>
        </div>
    </div>
{% else %}
    <div class="empty-state col-12">
        <i class="bi bi-inboxes"></i>
        <h3>Aucune ressource disponible</h3>
        <p>Veuillez vérifier ultérieurement</p>
    </div>
{% endfor %}

        </div>
    </div>
</section>
{% endblock %}

{% block js %}
{{ parent() }}
<script>
  document.addEventListener('DOMContentLoaded', function () {
      const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
      tooltipTriggerList.map(t => new bootstrap.Tooltip(t));

      if (typeof AOS !== 'undefined') {
          AOS.init({
              duration: 800,
              easing: 'ease-out-quad',
              once: true,
              offset: 50
          });
      }

      const searchInput = document.getElementById('searchInput');
      const typeFilter = document.getElementById('typeFilter');
      const priceRange = document.getElementById('priceRange');
      const availableFilter = document.getElementById('availableFilter');
      const sortPrice = document.getElementById('sortPrice');
      const cards = document.querySelectorAll('.ressource-card');

      searchInput.addEventListener('input', filterResources);
      typeFilter.addEventListener('change', filterResources);
      priceRange.addEventListener('input', filterResources);
      availableFilter.addEventListener('change', filterResources);
      sortPrice.addEventListener('change', filterResources);

      function filterResources() {
          const searchTerm = searchInput.value.toLowerCase();
          const selectedType = typeFilter.value;
          const maxPrice = priceRange.value ? parseFloat(priceRange.value) : Infinity;
          const order = sortPrice.value;
          const isAvailableOnly = availableFilter.checked;

          let resourcesArray = Array.from(cards);

          resourcesArray.forEach(card => {
              const name = card.dataset.nom;
              const type = card.dataset.type;
              const priceText = card.querySelector('.project-meta span').textContent;
              const price = parseFloat(priceText.replace(/[^\d.]/g, '')); // Nettoyer texte
              const isAvailable = card.querySelector('.badge').textContent.trim() === 'Disponible';

              let match = true;

              if (searchTerm && !name.includes(searchTerm)) {
                  match = false;
              }
              if (selectedType && type !== selectedType) {
                  match = false;
              }
              if (price > maxPrice) {
                  match = false;
              }
              if (isAvailableOnly && !isAvailable) {
                  match = false;
              }

              card.style.display = match ? 'block' : 'none';
          });

          // Optionnel : Trier
          if (order) {
              resourcesArray.sort((a, b) => {
                  const priceA = parseFloat(a.querySelector('.project-meta span').textContent.replace(/[^\d.]/g, ''));
                  const priceB = parseFloat(b.querySelector('.project-meta span').textContent.replace(/[^\d.]/g, ''));
                  return order === 'asc' ? priceA - priceB : priceB - priceA;
              });

              const parent = document.querySelector('.ressources-grid');
              resourcesArray.forEach(card => {
                  parent.appendChild(card); // Réordonner visuellement
              });
          }
      }

      filterResources(); // Appliquer le filtre dès le chargement
  });
</script>
{% endblock %}

