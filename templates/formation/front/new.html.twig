{% extends 'baseEMP.html.twig' %}
{% block form %}{% endblock %}
{% block title %}Nouvelle Formation - HR360{% endblock %}

{% block css %}
    {{ parent() }}
    <link rel="stylesheet" href="{{ asset('css/front/form.css') }}">
{% endblock %}

{% block index %}
    <section id="new-formation" class="new-formation section">
        <div class="container section-title" data-aos="fade-up">
            <h2>Créer une nouvelle formation</h2>
            <p>Remplissez les détails de la formation</p>
        </div>

        <div class="container" data-aos="fade-up" data-aos-delay="100">
            {% for message in app.flashes('error') %}
                <div class="alert alert-danger">
                    {{ message }}
                </div>
            {% endfor %}

            <div class="row justify-content-center">
                <div class="col-lg-8">
                    {{ form_start(form, {'attr': {'class': 'php-email-form', 'novalidate': 'novalidate'}}) }}
                        <div class="row">
                            <div class="col-md-6 form-group">
                                {{ form_label(form.titre) }}
                                {{ form_widget(form.titre, {'attr': {'class': 'form-control'}}) }}
                                <div class="invalid-feedback">
                                    {{ form_errors(form.titre) }}
                                </div>
                            </div>
                            <div class="col-md-6 form-group">
                                {{ form_label(form.duree) }}
                                {{ form_widget(form.duree, {'attr': {'class': 'form-control'}}) }}
                                <div class="invalid-feedback">
                                    {{ form_errors(form.duree) }}
                                </div>
                            </div>
                        </div>

                        <div class="form-group">
                            {{ form_label(form.description) }}
                            {{ form_widget(form.description, {'attr': {'class': 'form-control', 'rows': 5}}) }}
                            <div class="invalid-feedback">
                                {{ form_errors(form.description) }}
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6 form-group">
                                {{ form_label(form.dateFormation) }}
                                {{ form_widget(form.dateFormation, {'attr': {'class': 'form-control'}}) }}
                                <div class="invalid-feedback">
                                    {{ form_errors(form.dateFormation) }}
                                </div>
                            </div>
                            <div class="col-md-6 form-group d-flex align-items-center">
                                <div class="form-check">
                                    {{ form_widget(form.isFavorite, {'attr': {'class': 'form-check-input'}}) }}
                                    {{ form_label(form.isFavorite, null, {'label_attr': {'class': 'form-check-label'}}) }}
                                </div>
                                <div class="invalid-feedback">
                                    {{ form_errors(form.isFavorite) }}
                                </div>
                            </div>
                        </div>

                        <div class="text-center">
                            <button type="submit" class="btn btn-primary">Enregistrer</button>
                            <a href="{{ path('app_formation_front_index') }}" class="btn btn-secondary">Annuler</a>
                        </div>
                    {{ form_end(form) }}
                </div>
            </div>
        </div>
    </section>
{% endblock %}

{% block js %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Sélection du formulaire
            const form = document.querySelector('.php-email-form');
            
            // Écouteur d'événement pour la soumission
            form.addEventListener('submit', function(e) {
                // Validation des champs avant soumission
                if (!validateForm()) {
                    e.preventDefault();
                    return false;
                }
                
                // Feedback visuel pendant le traitement
                const submitBtn = form.querySelector('button[type="submit"]');
                submitBtn.disabled = true;
                submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Enregistrement...';
                
                console.log('Formulaire en cours de soumission...');
            });

            // Fonction de validation
            function validateForm() {
                let isValid = true;
                const requiredFields = form.querySelectorAll('[required]');
                
                requiredFields.forEach(field => {
                    if (!field.value.trim()) {
                        field.classList.add('is-invalid');
                        isValid = false;
                    } else {
                        field.classList.remove('is-invalid');
                    }
                });

                // Validation spécifique pour la durée (doit être un nombre positif)
                const dureeField = form.querySelector('#formation_duree');
                if (dureeField && (isNaN(dureeField.value) || dureeField.value <= 0) {
                    dureeField.classList.add('is-invalid');
                    isValid = false;
                }

                return isValid;
            }

            // Validation en temps réel
            form.querySelectorAll('input, textarea').forEach(input => {
                input.addEventListener('input', function() {
                    if (this.value.trim()) {
                        this.classList.remove('is-invalid');
                    }
                });
            });

            // Gestion spéciale pour le champ de date
            const dateField = form.querySelector('#formation_dateFormation');
            if (dateField) {
                dateField.addEventListener('change', function() {
                    const selectedDate = new Date(this.value);
                    const today = new Date();
                    
                    if (selectedDate < today) {
                        this.classList.add('is-invalid');
                        const errorDiv = this.nextElementSibling;
                        errorDiv.textContent = 'La date ne peut pas être dans le passé';
                    } else {
                        this.classList.remove('is-invalid');
                    }
                });
            }

            // Animation pour les erreurs
            form.querySelectorAll('.is-invalid').forEach(field => {
                field.addEventListener('focus', function() {
                    this.classList.remove('is-invalid');
                });
            });
        });
    </script>
{% endblock %}