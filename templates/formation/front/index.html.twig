{% extends 'baseEMP.html.twig' %}

{% block title %}Liste des Formations - HR360
{% endblock %}

{% block css %}
	{{ parent() }}
	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
	<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
	<link rel="stylesheet" href="{{ asset('front/css/project-card.css') }}">
	<style>
		/* Styles existants optimisés */
		.search-container {
			margin-bottom: 1.5rem;
		}

		.search-box {
			border-radius: 0.375rem 0 0 0.375rem;
			border-right: none;
		}

		.search-box:focus {
			box-shadow: none;
			border-color: #dc3545;
		}

		.btn-outline-danger:hover {
			color: white;
		}

		.filter-row {
			margin: 1rem 0;
			align-items: center;
		}

		.form-select {
			cursor: pointer;
			transition: all 0.2s;
		}

		.form-select:focus {
			border-color: #6c757d;
			box-shadow: 0 0 0 0.25rem rgba(108, 117, 125, 0.25);
		}

		.form-switch .form-check-input {
			width: 2.5em;
			margin-left: 0;
			cursor: pointer;
		}

		.form-switch .form-check-label {
			cursor: pointer;
			user-select: none;
		}

		.sort-options .btn-group {
			box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
			border-radius: 0.375rem;
			overflow: hidden;
		}

		.sort-options .btn {
			border: none;
			padding: 0.5rem;
			transition: all 0.2s;
		}

		.sort-options .btn:hover {
			background-color: #f8f9fa;
		}

		.sort-options .btn-check:checked + .btn {
			background-color: #0d6efd;
			color: white;
		}

		.entity-card {
			transition: transform 0.3s, box-shadow 0.3s;
			height: 100%;
			display: flex;
			flex-direction: column;
		}

		.entity-card:hover {
			transform: translateY(-5px);
			box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
		}

		.entity-header {
			position: relative;
			padding: 1.25rem;
			border-bottom: 1px solid rgba(0, 0, 0, 0.05);
		}

		.entity-icon {
			font-size: 1.5rem;
			color: #4e73df;
			margin-right: 0.75rem;
		}

		.entity-title {
			font-size: 1.1rem;
			margin: 0;
			color: #2E59D9;
			font-weight: 600;
			transition: color 0.3s ease;
		}

		.entity-card:hover .entity-title {
			color: #1A3A8F;
		}

		.section-title h2 {
			color: #2E59D9;
			font-weight: 700;
			margin-bottom: 0.5rem;
			position: relative;
		}

		.section-title h2::after {
			content: '';
			position: absolute;
			bottom: -8px;
			left: 0;
			width: 60px;
			height: 3px;
			background: #4e73df;
		}

		.alert-heading {
			color: #2E59D9;
		}

		.badge-position {
			position: absolute;
			top: 1rem;
			right: 1rem;
			font-size: 0.75rem;
			font-weight: 500;
		}

		.entity-body {
			padding: 1.25rem;
			flex-grow: 1;
		}

		.entity-body p {
			color: #6c757d;
			margin-bottom: 1rem;
		}

		.project-meta {
			margin-bottom: 0.5rem;
			color: #495057;
			font-size: 0.9rem;
		}

		.project-meta i {
			width: 1.25rem;
			text-align: center;
			margin-right: 0.5rem;
			color: #6c757d;
		}

		.entity-footer {
			padding: 1rem 1.25rem;
			background-color: rgba(0, 0, 0, 0.03);
			border-top: 1px solid rgba(0, 0, 0, 0.05);
		}

		.btn-outline-success {
			border-width: 2px;
			font-weight: 500;
		}

		.btn-outline-warning,
		.btn-warning {
			border-width: 2px;
			padding: 0.25rem 0.5rem;
		}

		.pagination .page-item .page-link {
			color: #495057;
			border: none;
			margin: 0 0.25rem;
			border-radius: 0.375rem;
		}

		.pagination .page-item.active .page-link {
			background-color: #4e73df;
			color: white;
		}

		.pagination .page-item.disabled .page-link {
			color: #adb5bd;
		}

		/* Ajustement pour mobile */
		@media(max-width: 576px) {
			#chatbot-container {
				width: calc(100% - 40px);
				height: 70vh;
				bottom: 10px;
				right: 10px;
			}
		}

		/* Styles optimisés pour le chatbot */
		.gemini-chatbot {
			font-family: 'Segoe UI', Roboto, sans-serif;
		}

		/* Bouton d'ouverture/fermeture */
		#chatbot-toggler {
			position: fixed;
			bottom: 30px;
			right: 30px;
			z-index: 1050;
		}

		#chatbot-toggler:hover {
			transform: scale(1.1) rotate(10deg);
			box-shadow: 0 8px 20px rgba(0, 0, 0, 0.3);
		}

		#chatbot-toggler i {
			font-size: 1.5rem;
		}

		#chatbot-container {
			position: fixed;
			bottom: 20px;
			right: 20px;
			width: 350px; /* Largeur optimale pour un chatbot */
			height: 500px; /* Hauteur confortable */
			z-index: 1000;
			transform-origin: bottom right;
		}

		#chatbot-container.d-none {
			transform: translateY(20px);
			opacity: 0;
			pointer-events: none;
		}

		#chatbot-container .card-header {
			background: linear-gradient(135deg, #4e73df 0%, #224abe 100%);
			padding: 15px 20px;
			border-bottom: none;
		}

		#chatbot-container .card-header h6 {
			font-weight: 600;
			font-size: 1rem;
		}

		#close-chatbot {
			background: rgba(255, 255, 255, 0.2);
			border: none;
			width: 30px;
			height: 30px;
			border-radius: 50%;
			color: white;
			padding: 0;
			transition: all 0.2s;
		}

		#close-chatbot:hover {
			background: rgba(255, 255, 255, 0.3);
		}

		/* Ajustement de la zone de messages */
		#chat-messages {
			height: calc(100% - 120px); /* Réserve de l'espace pour l'en-tête et l'input */
			overflow-y: auto;
			scroll-behavior: smooth;
		}


		.chat-message {
			max-width: 80%;
			margin-bottom: 8px;
			padding: 12px 16px;
			border-radius: 18px;
			line-height: 1.4;
			font-size: 0.9rem;
			position: relative;
			animation: fadeInUp 0.3s ease-out;
			box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
		}

		.user-message {
			background: linear-gradient(135deg, #4e73df 0%, #224abe 100%);
			color: white;
			margin-left: auto;
			border-bottom-right-radius: 4px;
			box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
		}

		.bot-message {
			background-color: white;
			color: #495057;
			margin-right: auto;
			border-bottom-left-radius: 4px;
			border: 1px solid #e9ecef;
		}

		#chatbot-container .input-group {
			position: absolute;
			bottom: 0;
			left: 0;
			right: 0;
			padding: 12px 15px;
			background: white;
			border-top: 1px solid #e9ecef;
			display: flex;
			align-items: center;
			gap: 8px;
		}

		#user-input {
			flex-grow: 1;
			min-height: 40px;
			max-height: 120px; /* Pour éviter que la zone devienne trop grande */
			resize: none;
			border: 1px solid #e9ecef;
			border-radius: 20px;
			padding: 10px 15px;
			font-size: 0.9rem;
			line-height: 1.4;
			background-color: #f8f9fa;
			transition: all 0.2s;
			/* Reset des propriétés par défaut */
			margin: 0;
			outline: none;
			box-shadow: none;
			appearance: none;
			-webkit-appearance: none;
			-moz-appearance: none;
		}


		#user-input:focus {
			border-color: #4e73df;
			box-shadow: 0 0 0 0.2rem rgba(78, 115, 223, 0.25);
		}

		#user-input::selection {
			background: rgba(78, 115, 223, 0.3);
			color: inherit;
		}

		#send-btn {
			flex-shrink: 0;
			width: 40px;
			height: 40px;
			border-radius: 50%;
			background: linear-gradient(135deg, #4e73df 0%, #224abe 100%);
			color: white;
			border: none;
			cursor: pointer;
			display: flex;
			align-items: center;
			justify-content: center;
			transition: all 0.2s;
			/* Reset */
			padding: 0;
			margin: 0;
			line-height: 1;
		}

		#send-btn:hover {
			transform: scale(1.05);
		}

		/* Animation */
		@keyframes fadeInUp {
			from {
				opacity: 0;
				transform: translateY(10px);
			}
			to {
				opacity: 1;
				transform: translateY(0);
			}
		}

		/* Typing indicator */
		.typing-indicator {
			display: flex;
			padding: 10px 15px;
			background: white;
			border-radius: 18px;
			border: 1px solid #e9ecef;
			width: fit-content;
		}

		.typing-indicator span {
			height: 8px;
			width: 8px;
			background: #6c757d;
			border-radius: 50%;
			display: inline-block;
			margin: 0 2px;
			animation: bounce 1.5s infinite ease-in-out;
		}

		.typing-indicator span:nth-child(2) {
			animation-delay: 0.2s;
		}

		.typing-indicator span:nth-child(3) {
			animation-delay: 0.4s;
		}

		@keyframes bounce {
			0,
			60%,
			100% {
				transform: translateY(0);
			}
			30% {
				transform: translateY(-5px);
			}
		}
	</style>
{% endblock %}

{% block index %}
	<section id="formations" class="formations section">
		<div class="container section-title" data-aos="fade-up">
			<h2 class="mb-3">Nos Formations</h2>
			<p class="text-muted">Découvrez notre catalogue de formations</p>
		</div>

		{# Affichage des messages flash #}
		<div class="container mb-4">
			{% for label, messages in app.flashes %}
				{% for message in messages %}
					<div class="alert alert-{{ label == 'success' ? 'success' : (label == 'warning' ? 'warning' : (label == 'danger' ? 'danger' : 'info')) }} alert-dismissible fade show" role="alert">
						<i class="fas fa-info-circle me-2"></i>
						{{ message }}
						<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
					</div>
				{% endfor %}
			{% endfor %}
		</div>

		<div
			class="container">
			{# Barre de recherche et filtres #}
			<div class="bg-light p-4 rounded-3 mb-4 shadow-sm">
				<form method="get" class="search-form">
					<div class="row align-items-center">
						<div class="col-md-6 mb-3 mb-md-0">
							<div class="input-group">
								<input type="text" name="search" class="form-control search-box py-2" placeholder="Rechercher par titre ou description..." value="{{ search_params.search ?? '' }}">
								<button class="btn btn-outline-danger px-3" type="submit">
									<i class="fas fa-search"></i>
								</button>
							</div>
						</div>

						<div class="col-md-6">
							<div class="d-flex flex-wrap justify-content-end gap-2">
								<a href="{{ path('app_formation_front_index') }}" class="btn btn-outline-secondary">
									<i class="fas fa-sync-alt me-1"></i>
									Réinitialiser
								</a>
							</div>
						</div>
					</div>

					<div class="row mt-3 g-3">
						<div class="col-md-3">
							<select name="min_duration" class="form-select">
								<option value="">Durée min</option>
								{% for i in 1..10 %}
									<option value="{{ i }}" {{ search_params.min_duration == i ? 'selected' : '' }}>
										{{ i }}
										jour{{ i > 1 ? 's' : '' }}
									</option>
								{% endfor %}
							</select>
						</div>

						<div class="col-md-3">
							<select name="max_duration" class="form-select">
								<option value="">Durée max</option>
								{% for i in 1..10 %}
									<option value="{{ i }}" {{ search_params.max_duration == i ? 'selected' : '' }}>
										{{ i }}
										jour{{ i > 1 ? 's' : '' }}
									</option>
								{% endfor %}
							</select>
						</div>

						<div class="col-md-4 d-flex align-items-center">
							<div class="form-check form-switch me-3">
								<input class="form-check-input" type="checkbox" name="favorites" id="favoritesSwitch" {{ search_params.favorites ? 'checked' : '' }}>
								<label class="form-check-label" for="favoritesSwitch">
									<i class="fas fa-star me-1"></i>
									Favoris seulement
								</label>
							</div>
						</div>

						<div class="col-md-2 text-end">
							<button type="submit" class="btn btn-primary w-100">
								<i class="fas fa-filter me-1"></i>
								Filtrer
							</button>
						</div>
					</div>

					<div class="row mt-3">
						<div class="col-12">
							<div class="sort-options">
								<div class="btn-group" role="group">
									<input type="radio" class="btn-check" name="sort" id="sortTitle" value="titre" {{ search_params.sort == 'titre' ? 'checked' : '' }}>
									<label class="btn btn-outline-primary" for="sortTitle">
										<i class="fas fa-font me-1"></i>
										Titre
									</label>

									<input type="radio" class="btn-check" name="sort" id="sortDate" value="date" {{ search_params.sort == 'date' ? 'checked' : '' }}>
									<label class="btn btn-outline-primary" for="sortDate">
										<i class="fas fa-calendar me-1"></i>
										Date
									</label>

									<input type="radio" class="btn-check" name="sort" id="sortDuration" value="duration" {{ search_params.sort == 'duration' ? 'checked' : '' }}>
									<label class="btn btn-outline-primary" for="sortDuration">
										<i class="fas fa-clock me-1"></i>
										Durée
									</label>
								</div>
							</div>
						</div>
					</div>

					<input type="hidden" name="direction" value="{{ search_params.direction ?? 'ASC' }}">
				</form>
			</div>

			{# Liste des formations #}
			{% if formations|length > 0 %}
				<div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
					{% for formation in formations %}
						<div class="col" data-aos="fade-up" data-aos-delay="{{ loop.index * 50 }}">
							<div class="card entity-card h-100">
								<div class="card-header entity-header">
									<div class="d-flex align-items-center">
										<i class="fas fa-graduation-cap entity-icon"></i>
										<h5 class="entity-title">{{ formation.titre }}</h5>
									</div>
									<span class="badge bg-success badge-position">
										<i class="fas fa-check-circle me-1"></i>
										{{ formation.isFavorite ? 'Favori' : 'Disponible' }}
									</span>
								</div>

								<div class="card-body entity-body">
									<p class="mb-3">
										<i class="fas fa-align-left text-muted me-2"></i>
										{{ formation.description|u.truncate(120, '...') }}
									</p>

									<div class="d-flex flex-column gap-2 mt-auto">
										<div class="project-meta">
											<i class="fas fa-clock"></i>
											<span>Durée:
												{{ formation.duree }}
												jour{{ formation.duree > 1 ? 's' : '' }}</span>
										</div>
										<div class="project-meta">
											<i class="fas fa-calendar-day"></i>
											<span>Date:
												{{ formation.dateFormation|date('d/m/Y') }}</span>
										</div>
									</div>
								</div>

								<div class="card-footer entity-footer">
									<div class="d-flex justify-content-between align-items-center">
										<a href="{{ path('app_participation_front_new', {'id': formation.id}) }}" class="btn btn-outline-success btn-sm">
											<i class="fas fa-user-check me-1"></i>
											Participer
										</a>

										<form action="{{ path('app_formation_toggle_favorite', {'id': formation.id}) }}" method="post" class="d-inline">
											<input type="hidden" name="_token" value="{{ csrf_token('toggle-favorite' ~ formation.id) }}">
											<input type="hidden" name="redirect_to" value="{{ app.request.uri }}">
											<button type="submit" class="btn btn-sm {{ formation.isFavorite ? 'btn-warning' : 'btn-outline-warning' }}" title="{{ formation.isFavorite ? 'Retirer des favoris' : 'Ajouter aux favoris' }}">
												<i class="fas fa-star"></i>
											</button>
										</form>
									</div>
								</div>
							</div>
						</div>
					{% endfor %}
				</div>
			{% else %}
				<div class="col-12" data-aos="fade-up">
					<div class="alert alert-info text-center py-4">
						<i class="fas fa-info-circle fa-2x mb-3"></i>
						<h4 class="alert-heading">Aucune formation trouvée</h4>
						<p class="mb-0">Aucune formation ne correspond à vos critères de recherche.</p>
					</div>
				</div>
			{% endif %}

			{# Pagination #}
			{% if total > limit %}
				<div class="row mt-5">
					<div class="col-12">
						<nav aria-label="Pagination">
							<ul class="pagination justify-content-center">
								<li class="page-item {{ page == 1 ? 'disabled' : '' }}">
									<a class="page-link" href="{{ path('app_formation_front_index', { 'page': page - 1, 'search': search_params.search, 'favorites': search_params.favorites ? '1' : '', 'min_duration': search_params.min_duration, 'max_duration': search_params.max_duration, 'sort': search_params.sort, 'direction': search_params.direction }) }}" aria-label="Précédent">
										<span aria-hidden="true">&laquo;</span>
									</a>
								</li>

								{% for i in 1..((total / limit)|round(0, 'ceil')) %}
									{% if (i >= page - 2 and i <= page + 2) or i == 1 or i == ((total / limit)|round(0, 'ceil')) %}
										{% if i == ((total / limit)|round(0, 'ceil')) and page + 3 < ((total / limit)|round(0, 'ceil')) %}
											<li class="page-item disabled">
												<span class="page-link">...</span>
											</li>
										{% endif %}

										<li class="page-item {{ page == i ? 'active' : '' }}">
											<a class="page-link" href="{{ path('app_formation_front_index', { 'page': i, 'search': search_params.search, 'favorites': search_params.favorites ? '1' : '', 'min_duration': search_params.min_duration, 'max_duration': search_params.max_duration, 'sort': search_params.sort, 'direction': search_params.direction }) }}">{{ i }}</a>
										</li>

										{% if i == 1 and page - 3 > 1 %}
											<li class="page-item disabled">
												<span class="page-link">...</span>
											</li>
										{% endif %}
									{% endif %}
								{% endfor %}

								<li class="page-item {{ page * limit >= total ? 'disabled' : '' }}">
									<a class="page-link" href="{{ path('app_formation_front_index', { 'page': page + 1, 'search': search_params.search, 'favorites': search_params.favorites ? '1' : '', 'min_duration': search_params.min_duration, 'max_duration': search_params.max_duration, 'sort': search_params.sort, 'direction': search_params.direction }) }}" aria-label="Suivant">
										<span aria-hidden="true">&raquo;</span>
									</a>
								</li>
							</ul>
						</nav>
					</div>
				</div>
			{% endif %}
		</div>

		{# Chatbot Gemini #}
		<div class="gemini-chatbot">
			<button id="chatbot-toggler" class="btn btn-primary rounded-circle p-3 position-fixed" style="bottom: 30px; right: 30px; z-index: 1000;">
				<i class="fas fa-robot fa-lg"></i>
			</button>

			<div id="chatbot-container" class="card position-fixed d-none" style="width: 350px; bottom: 90px; right: 30px; height: 500px; z-index: 1000;">
				<div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
					<h6 class="mb-0">Assistant Formations HR360</h6>
					<button id="close-chatbot" class="btn btn-sm btn-light">
						<i class="fas fa-times"></i>
					</button>
				</div>
				<div class="card-body p-0 d-flex flex-column">
					<div id="chat-messages" class="flex-grow-1 p-3 overflow-auto" style="height: 400px;">
						<div class="text-center text-muted small">
							Bonjour ! Posez-moi des questions sur nos formations.
						</div>
					</div>
					<div class="p-3 border-top">
						<div class="input-group">
							<input type="text" id="user-input" class="form-control" placeholder="Tapez votre question..." autocomplete="off">
							<button id="send-btn" class="btn btn-primary">
								<i class="fas fa-paper-plane"></i>
							</button>
						</div>
					</div>
				</div>
			</div>
		</div>
	</section>
{% endblock %}

{% block js %}
	{{ parent() }}
	<script>
		document.addEventListener('DOMContentLoaded', function () { // Animation des cartes avec délai progressif
document.querySelectorAll('[data-aos="fade-up"]').forEach((el, index) => {
el.style.transitionDelay = `${
index * 50
}ms`;
});

// Gestion des favoris avec feedback visuel
document.querySelectorAll('.btn-outline-warning, .btn-warning').forEach(btn => {
btn.addEventListener('click', function () {
this.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';

setTimeout(() => {
this.classList.toggle('btn-warning');
this.classList.toggle('btn-outline-warning');
this.innerHTML = '<i class="fas fa-star"></i>';

// Mise à jour du tooltip
const isFavorite = this.classList.contains('btn-warning');
this.setAttribute('title', isFavorite ? 'Retirer des favoris' : 'Ajouter aux favoris');
}, 500);
});
});

// Tooltips pour les boutons
const tooltipTriggerList = [].slice.call(document.querySelectorAll('[title]'));
tooltipTriggerList.map(function (tooltipTriggerEl) {
return new bootstrap.Tooltip(tooltipTriggerEl);
});

// Configuration du Chatbot
const GEMINI_API_KEY = 'AIzaSyDJCHou0OzX0ydCPVVv3my6SXl-hVJULoA';
const chatbotToggler = document.getElementById('chatbot-toggler');
const chatbotContainer = document.getElementById('chatbot-container');
const closeChatbot = document.getElementById('close-chatbot');
const chatMessages = document.getElementById('chat-messages');
const userInput = document.getElementById('user-input');
const sendBtn = document.getElementById('send-btn');

// Gestion de l'interface
chatbotToggler.addEventListener('click', () => {
chatbotContainer.classList.toggle('d-none');
userInput.focus();
});

closeChatbot.addEventListener('click', () => {
chatbotContainer.classList.add('d-none');
});

// Envoyer un message
userInput.addEventListener('keypress', (e) => {
if (e.key === 'Enter') 
sendMessage();



});

sendBtn.addEventListener('click', sendMessage);

// Fonction principale
async function sendMessage() {
const message = userInput.value.trim();
if (! message) 
return;



addMessage(message, 'user');
userInput.value = '';

const loadingId = addLoadingIndicator();

try {
const response = await fetch (`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}`, {
method: 'POST',
headers: {
'Content-Type': 'application/json'
},
body: JSON.stringify(
{
contents: [
{
parts: [
{
text: `Tu es un assistant spécialisé dans les formations RH. 
                                          Réponds de manière concise et professionnelle en français.
                                          Utilise des listes à puces quand c'est pertinent.
                                          Formate les titres avec **texte**.
                                          Voici le contexte : ${
document.querySelector('.section-title h2').textContent
}
                                          Question : ${message}`
}
]
}
]
}
)
});

const data = await response.json();
document.getElementById(loadingId).remove();

if (data.candidates && data.candidates[0].content.parts) {
const botResponse = data.candidates[0].content.parts[0].text;
// Formatage Markdown simple
const formattedResponse = botResponse.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>').replace(/\*(.*?)\*/g, '<em>$1</em>').replace(/- (.*?)(\n|$)/g, '<li>$1</li>').replace(/(<li>.*<\/li>)/g, '<ul>$1</ul>');

addMessage(formattedResponse, 'bot');
} else {
addMessage("Je n'ai pas pu comprendre la réponse. Pouvez-vous reformuler votre question ?", 'bot');
}
} catch (error) {
console.error('Erreur:', error);
document.getElementById(loadingId).remove();
addMessage("Désolé, je rencontre un problème technique. Veuillez réessayer plus tard.", 'bot');
}
}

// Fonctions utilitaires
function addMessage(text, sender) {
const messageDiv = document.createElement('div');
messageDiv.classList.add('chat-message', `${sender}-message`);

// Formatage des liens et du texte
const urlRegex = /(https?:\/\/[^\s]+)/g;
const formattedText = text.replace(urlRegex, url => `<a href="${url}" target="_blank" style="color: ${
sender === 'bot' ? '#4e73df' : '#e3f2fd'
}; text-decoration: underline;">${url}</a>`);

messageDiv.innerHTML = formattedText;
chatMessages.appendChild(messageDiv);
chatMessages.scrollTop = chatMessages.scrollHeight;
}

function addLoadingIndicator() {
const id = 'typing-' + Date.now();
const typingDiv = document.createElement('div');
typingDiv.id = id;
typingDiv.classList.add('typing-indicator');
typingDiv.innerHTML = `
                    <span></span>
                    <span></span>
                    <span></span>
                `;
chatMessages.appendChild(typingDiv);
chatMessages.scrollTop = chatMessages.scrollHeight;
return id;
}
});
	</script>
{% endblock %}
