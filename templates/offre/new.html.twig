{% extends 'baseRH.html.twig' %}

{% block title %}New Offre{% endblock %}
{% block heading %}New Offre{% endblock %}

{% block css %}
    {{ parent() }}
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
{% endblock %}

{% block body %}
    <div class="container py-5">
        <h1 class="text-center mb-5 text-dark">Créer une nouvelle offre</h1>
        {{ include('offre/_form.html.twig', {'form_title': 'Nouvelle Offre'}) }}
    </div>
{% endblock %}

{% block js %}
    {{ parent() }}
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
     <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <meta name="csrf-token" content="{{ csrf_token('app') }}">
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const generateBtn = document.getElementById('generate-description-btn');
            const descriptionField = document.getElementById('offre_description');
            const titreField = document.getElementById('offre_titre');
            
            if (!generateBtn || !descriptionField || !titreField) {
                console.error('Un ou plusieurs éléments HTML sont introuvables');
                return;
            }
            
            generateBtn.addEventListener('click', async function() {
                const titre = titreField.value.trim();
                
                if (!titre) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Erreur',
                        text: 'Veuillez entrer un titre pour générer une description.'
                    });
                    return;
                }
                
                try {
                    generateBtn.disabled = true;
                    generateBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Génération en cours...';
                    
                    const response = await fetch('{{ path("app_offre_generate_description") }}', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest'
                        },
                        body: JSON.stringify({ titre: titre })
                    });
                    
                    if (!response.ok) {
                        const error = await response.text();
                        throw new Error(error || 'Erreur serveur');
                    }
                    
                    const data = await response.json();
                    
                    if (data.description) {
                        descriptionField.value = data.description;
                    } else {
                        throw new Error(data.error || 'Description non reçue');
                    }
                } catch (error) {
                    console.error('Erreur:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Erreur',
                        text: typeof error.message === 'string' ? error.message : 'Une erreur est survenue'
                    });
                } finally {
                    generateBtn.disabled = false;
                    generateBtn.innerHTML = '<i class="fas fa-magic me-2"></i>Générer avec AI';
                }
            });
        });
        // Traduction
document.getElementById('translate-description-btn')?.addEventListener('click', async function() {
    const btn = this;
    const field = document.getElementById('offre_description');
    const text = field.value.trim();
    
    if (!text) {
        Swal.fire('Erreur', 'Veuillez entrer une description à traduire', 'error');
        return;
    }

    btn.disabled = true;
    btn.innerHTML = '<span class="spinner-border spinner-border-sm"></span> Traduction...';

    try {
        const response = await fetch('{{ path("app_offre_translate") }}', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify({ text: text })
        });

        const data = await response.json();

        if (!response.ok) {
            const errorMsg = data.message || 'Erreur lors de la traduction';
            throw new Error(errorMsg);
        }

        field.value = data.translatedText;
        Swal.fire({
            icon: 'success',
            title: 'Traduction réussie',
            timer: 1500,
            showConfirmButton: false
        });
        
    } catch (error) {
        console.error('Erreur traduction:', error);
        Swal.fire({
            icon: 'error',
            title: 'Erreur',
            text: error.message.includes('service_unavailable') 
                ? 'Service temporairement indisponible' 
                : error.message,
            confirmButtonColor: '#4361ee'
        });
    } finally {
        btn.disabled = false;
        btn.innerHTML = '<i class="fas fa-language me-2"></i>Traduire en anglais';
    }
});
// Export PDF
 // Initialise jsPDF (en utilisant la version UMD)
        const { jsPDF } = window.jspdf;
        
    document.addEventListener('DOMContentLoaded', function() {
    document.getElementById('export-pdf-btn')?.addEventListener('click', async function() {
        const description = document.getElementById('offre_description').value.trim();
        const titre = document.getElementById('offre_titre').value.trim() || 'Description Offre';

        if (!description || !titre) {
            Swal.fire({
                icon: 'error',
                title: 'Erreur',
                text: "Veuillez remplir le titre et la description avant d'exporter"
            });
            return;
        }

        try {
            const doc = new jsPDF({
                unit: 'mm',
                format: 'a4',
                putOnlyUsedFonts: true
            });

            let y = 15;
            const pageHeight = doc.internal.pageSize.height;
            const pageWidth = doc.internal.pageSize.width;

            // 1. Ajouter le logo + RH Entreprise 360 à gauche
            const logoUrl = '/images/logoRH360.png';
            const img = new Image();
            img.src = logoUrl;
            img.onload = function() {
                // Logo à gauche
                const logoWidth = 30;
                const logoHeight = 30;
                const logoX = 15; // 15mm margin left
                const logoY = y;
                doc.addImage(img, 'PNG', logoX, logoY, logoWidth, logoHeight);

                // Texte "RH Entreprise 360" à droite du logo
                doc.setFontSize(16);
                doc.setFont('helvetica', 'bold');
                doc.text('RH Entreprise 360', logoX + logoWidth + 5, logoY + 15); // à droite du logo

                y += 40; // Avancer un peu

                // 2. Titre "Offre d'emploi" centré
                doc.setFontSize(20);
                doc.setFont('helvetica', 'bold');
                doc.text("Offre d'emploi", pageWidth / 2, y, { align: 'center' });

                y += 20;

                // Nettoyer la description
                const cleanedDescription = description.replace(/\*\*/g, '');

                // Séparer en sections
                const sections = cleanedDescription.split(/\n(?=\s*[A-Z])/);

                sections.forEach(section => {
                    section = section.trim();
                    if (section.length === 0) return;

                    const match = section.match(/^(.+?)\s*:/);
                    if (match) {
                        const title = match[1];

                        // Titre de section
                        doc.setFont('helvetica', 'bold');
                        doc.setFontSize(14);
                        doc.text(title, 15, y);
                        y += 6; // **Petit écart**, pour rapprocher mieux le texte

                        // Contenu de section
                        const content = section.substring(match[0].length).trim();
                        doc.setFont('helvetica', 'normal');
                        doc.setFontSize(12);

                        const lines = doc.splitTextToSize(content, 180);
                        lines.forEach(line => {
                            if (y > pageHeight - 20) {
                                doc.addPage();
                                y = 15;
                            }
                            doc.text(line, 15, y);
                            y += 6; // rapprocher aussi les lignes légèrement
                        });

                        y += 4; // Petit espace entre sections
                    } else {
                        // Cas spécial si pas de titre
                        const lines = doc.splitTextToSize(section, 180);
                        lines.forEach(line => {
                            if (y > pageHeight - 20) {
                                doc.addPage();
                                y = 15;
                            }
                            doc.text(line, 15, y);
                            y += 6;
                        });
                    }
                });

                // 7. Sauvegarder le fichier
                doc.save(`Offre_${titre.substring(0, 20)}.pdf`);
            };

            img.onerror = function() {
                Swal.fire({
                    icon: 'error',
                    title: 'Erreur',
                    text: "Impossible de charger le logo. Vérifiez le chemin du fichier."
                });
            };

        } catch (error) {
            console.error('Erreur génération PDF:', error);
            Swal.fire({
                icon: 'error',
                title: 'Erreur',
                text: 'Une erreur est survenue lors de la génération du PDF'
            });
        }
    });
});



 </script> 
    
    
       

    
{% endblock %}